一、前提：当tomcat启动完成前会加载ServletContainerInitializer （作为servlet和tomcat关联在一起的重要接口）的实现类

由于ServletContainerInitializer子类可以是多个但是加载的时候就只能是一个，所以需要配置ServletContainerInitializer实现类的位置。

二、配置ServletContainerInitializer实现类所在的位置步骤：
1、创建文件名为 javax.servlet.ServletContainerInitializer文件并且放在工程目录下的 META-INF/services 目录下
2、在javax.servlet.ServletContainerInitializer 文件中写入实现类的全限定名（例如springmvc中实现类为org.springframework.web.SpringServletContainerInitializer）

三、读SpringServletContainerInitializer源码以后发现 要使用 无配置版本（不需要web.xml）的spring mvc 项目，
需要自定义实现一个WebApplicationInitializer类型的实现类
    其中定义了root容器的配置类，对应RootContextConfig类、app容器的配置累，对应AppContextConfig类
四、springmvc项目存在两个容器：root容器和app容器
root容器：保存services、repository等bean
app容器：保存Controller、HandlerMapping、viewResolver等bean

五、springmvc源码入口：SpringServletContainerInitializer类中 172行 调用WebApplicationInitializer类型的实现类的onStartup方法
root容器创建的地方：
AbstractContextLoaderInitializer类
	protected void registerContextLoaderListener(ServletContext servletContext) {
		WebApplicationContext rootAppContext = createRootApplicationContext();//创建root容器（等到servletContext发送变化时，ContextLoaderListener监听到才调用容器的refresh方法）
		if (rootAppContext != null) {
			ContextLoaderListener listener = new ContextLoaderListener(rootAppContext);//把root容器引用设置到ContextLoaderListener中
			listener.setContextInitializers(getRootApplicationContextInitializers());
			servletContext.addListener(listener);
		}
		else {
			logger.debug("No ContextLoaderListener registered, as " +
					"createRootApplicationContext() did not return an application context");
		}
	}


app容器创建的地方：
AbstractDispatcherServletInitializer类
	protected void registerDispatcherServlet(ServletContext servletContext) {
		String servletName = getServletName();
		Assert.hasLength(servletName, "getServletName() must not return null or empty");

		WebApplicationContext servletAppContext = createServletApplicationContext();//创建app容器（等到dispatcherServlet初始化时，才调用容器的refresh方法）
		Assert.notNull(servletAppContext, "createServletApplicationContext() must not return null");

		FrameworkServlet dispatcherServlet = createDispatcherServlet(servletAppContext);//把app容器引用设置到dispatcherServlet中
		Assert.notNull(dispatcherServlet, "createDispatcherServlet(WebApplicationContext) must not return null");
		dispatcherServlet.setContextInitializers(getServletApplicationContextInitializers());

		ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet);
		if (registration == null) {
			throw new IllegalStateException("Failed to register servlet with name '" + servletName + "'. " +
					"Check if there is another servlet registered under the same name.");
		}

		registration.setLoadOnStartup(1);
		registration.addMapping(getServletMappings());
		registration.setAsyncSupported(isAsyncSupported());

		Filter[] filters = getServletFilters();
		if (!ObjectUtils.isEmpty(filters)) {
			for (Filter filter : filters) {
				registerServletFilter(servletContext, filter);
			}
		}

		customizeRegistration(registration);
	}


六、springMVC重要API:
    ServletContext：servlet上下文
    ServletRegistration.Dynamic：servlet
    FilterRegistration：注册filter时的api

Ps：servlet3.0需要tomcat7以及更高版本的支持