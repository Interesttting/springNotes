一、分析Tomcat加载配置的过程：
  tomcat源码中 webConfig()内容：
  1、读取web-fragment.xml和各个jar模块
  2、排序所有读取到的fragments
  3、查找所有的ServletContainerInitializer(SCIs)
  4、处理WEB-INF/Classes文件夹下面的
  5、处理所有的注解配置类和，并缓存
  6、将所有的web-fragment.xml合并
  7、转换所有的JSP代码成Java代码
  8、将Web.xml配置转变成代码式的配置
  9、查找静态资源默认文件夹WEB-INF/classes/META-INF/resources
  10、将所有的实现ServletContainerInitializer的类添加到StandardContext的initializers集合中

  总结：实现 步骤8和步骤10都可以更改tomcat对一个应用的配置修改
  步骤8实现方式即编辑web.xml
  步骤10实现方式即编写一个实现ServletContainerInitializer接口的实现类

  配置web项目方式有四种：
  1、只解析web.xml。（**基于web.xml配置的Web项目**）
  2、只加载ServletContainerInitializer 的实现类。（ **基于注解配置的Web项目** ）
  3、前面两种方式混用
  4、servlet注解方式：@WebServlet、@WebFilter、@WebFilter

二、重点 实现ServletContainerInitializer的方式配置web项目的开发步骤：
 1、在工程目录下创建META-INF/services 目录。
 2、在META-INF/services 目录下创建名为 javax.javax.http.servlet.ServletContainerInitializer的文件。
 3、创建一个实现ServletContainerInitializer接口的java类。并且将这个类的路径引用填入到javax.javax.http.servlet.ServletContainerInitializer文件中。


三、springmvc 实现ServletContainerInitializer的方式配置web项目：
    springmvc提供的实现类为org.springframework.web.SpringServletContainerInitializer，如图所示。分析SpringServletContainerInitializer类得知最终调用*WebApplicationInitializer*的实现类：

    基于springmvc对实现注解配置web项目的框架的开发步骤：
    ①、自定义*WebApplicationInitializer*实现类（MyIntializer）
    ②、创建root容器配置类、app容器配置类
    ③、在pom中忽略对web.xml的检查的配置

四、springmvc项目存在两个容器：root容器和app容器（父子关系）
root容器：保存services、repository等bean
app容器：保存Controller、HandlerMapping、viewResolver等bean

五、springmvc源码入口：SpringServletContainerInitializer类中 172行 调用WebApplicationInitializer类型的实现类的onStartup方法


六：项目阅读入口类：
1、SpringServletContainerInitializer
2、MyServletContainerInitializer
3、MyInitializer


Ps：servlet3.0需要tomcat7以及更高版本的支持